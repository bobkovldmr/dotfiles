#!/usr/bin/env zsh

# Some aliases for Homebrew
  alias bup='brew update && brew upgrade'
  alias bout='brew outdated'
  alias bin='brew install'
  alias brm='brew uninstall'
  alias bls='brew list'
  alias bsr='brew search'
  alias binf='brew info'
  alias bdr='brew doctor'

# Some directory listing with colors
  alias sl=ls
  alias ls='ls -G'        # Compact view, show colors
  alias la='ls -AF'       # Compact view, show hidden
  alias ll='ls -al'
  alias l='ls -a'
  alias l1='ls -1'

# because I'm to lazy to write vim
  alias v='vim'

# Give me z Please
. ~/z/z.sh


# Desktop Programs
  alias xcode="open -a '/Applications/XCode.app'"
  alias safari="open -a safari"
  alias chrome="open -a google\ chrome"
  alias chromium="open -a chromium"
  alias f='open -a Finder '
  alias fh='open -a Finder .'
  alias textedit='open -a TextEdit'
  alias hex='open -a "Hex Fiend"'
  alias skype='open -a Skype'
  alias slack="open -a '/Applications/Slack.app'"

# Usefull stuff for presentation and seeing dotfiles
  alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
  alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
  alias showall='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'
  alias hideall='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'

# cat is good. cat with colors is better
# alias cat='pygmentize -O style=monokai -f console256 -g'

# Get rid of those pesky .DS_Store files recursively
  alias dsclean='find . -type f -name .DS_Store -print0 | xargs -0 rm'

# Track who is listening to your iTunes music
  alias whotunes='lsof -r 2 -n -P -F n -c iTunes -a -i TCP@`hostname`:3689'

# Flush your dns cache
  alias flush='dscacheutil -flushcache'

# Because Typing python -m SimpleHTTPServer is too Damn Long
# Start an HTTP server from a directory, optionally specifying the port
  function server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
  }

function run(){
  ionic build "$1" && ionic run "$1"
}
function ghUpdate() {
    if git remote | grep upstream > /dev/null;
  then
    echo "upstream is set"
  else
     read "?Whats the URl of the original repo? | " answer
# Add the remote, call it "upstream":
    echo $answer
    git remote add upstream $answer

  fi
    git fetch upstream
    git checkout master
    git rebase upstream/master
  }


# incase i forget how to clear
  alias c='clear'
  alias k='clear'
  alias cls='clear'

# presentation crap
  alias whoamireally='echo "Mike Hartington
  Dev Advocate for Ionic
  Beer lover and Cat lover" '

# archive file or folder
  function compress()
  {
      dirPriorToExe=`pwd`
      dirName=`dirname $1`
      baseName=`basename $1`

      if [ -f $1 ] ; then
          echo "It was a file change directory to $dirName"
          cd $dirName
          case $2 in
            tar.bz2)
                      tar cjf $baseName.tar.bz2 $baseName
                      ;;
            tar.gz)
                      tar czf $baseName.tar.gz $baseName
                      ;;
            gz)
                      gzip $baseName
                      ;;
            tar)
                      tar -cvvf $baseName.tar $baseName
                      ;;
            zip)
                      zip -r $baseName.zip $baseName
                      ;;
              *)
                      echo "Method not passed compressing using tar.bz2"
                      tar cjf $baseName.tar.bz2 $baseName
                      ;;
          esac
          echo "Back to Directory $dirPriorToExe"
          cd $dirPriorToExe
      else
          if [ -d $1 ] ; then
              echo "It was a Directory change directory to $dirName"
              cd $dirName
              case $2 in
                  tar.bz2)
                          tar cjf $baseName.tar.bz2 $baseName
                          ;;
                  tar.gz)
                          tar czf $baseName.tar.gz $baseName
                          ;;
                  gz)
                          gzip -r $baseName
                          ;;
                  tar)
                          tar -cvvf $baseName.tar $baseName
                          ;;
                  zip)
                          zip -r $baseName.zip $baseName
                          ;;
                  *)
                      echo "Method not passed compressing using tar.bz2"
                  tar cjf $baseName.tar.bz2 $baseName
                          ;;
              esac
              echo "Back to Directory $dirPriorToExe"
              cd $dirPriorToExe
          else
              echo "'$1' is not a valid file/folder"
          fi
      fi
      echo "Done"
      echo "###########################################"
  }

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f "$1" ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case "$1" in
          *.tar.bz2)   tar xvjf ../"$1"    ;;
          *.tar.gz)    tar xvzf ../"$1"    ;;
          *.tar.xz)    tar xvJf ../"$1"    ;;
          *.lzma)      unlzma ../"$1"      ;;
          *.bz2)       bunzip2 ../"$1"     ;;
          *.rar)       unrar x -ad ../"$1" ;;
          *.gz)        gunzip ../"$1"      ;;
          *.tar)       tar xvf ../"$1"     ;;
          *.tbz2)      tar xvjf ../"$1"    ;;
          *.tgz)       tar xvzf ../"$1"    ;;
          *.zip)       unzip ../"$1"       ;;
          *.Z)         uncompress ../"$1"  ;;
          *.7z)        7z x ../"$1"        ;;
          *.xz)        unxz ../"$1"        ;;
          *.exe)       cabextract ../"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

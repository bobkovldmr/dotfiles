# use C-a, since it's on the home row and easier to hit than C-b
  set-option -g prefix C-a
  unbind-key C-a
  bind-key C-a send-prefix
  set -g base-index 1

# Easy config reload
  bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi is good
  setw -g mode-keys vi
  set -g status-keys vi
  bind-key -t vi-copy 'v' begin-selection
  bind-key -t vi-copy 'y' copy-selection
  set -g default-terminal "screen-256color"

# mouse behavior
  setw -g mode-mouse on
  set -g mouse-select-pane on
  set -g mouse-resize-pane on


  bind-key : command-prompt
  bind-key r refresh-client
  bind-key L clear-history


  bind-key space next-window
  bind-key bspace previous-window
  bind-key enter next-layout

# use vim-like keys for splits and windows
  bind-key v split-window -h -c "#{pane_current_path}"
  bind-key s split-window -v -c "#{pane_current_path}"
  bind-key h select-pane -L
  bind-key j select-pane -D
  bind-key k select-pane -U
  bind-key l select-pane -R

# smart pane switching with awareness of vim splits
  bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
  bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
  bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
  bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
  bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
  bind C-l send-keys 'C-l'
  bind-key C-o rotate-window
  bind-key + select-layout main-horizontal
  bind-key = select-layout main-vertical
  set-window-option -g other-pane-height 10
  set-window-option -g other-pane-width 90
  bind-key a last-pane
  bind-key q display-panes
  bind-key c new-window -c "#{pane_current_path}"
  bind-key t next-window
  bind-key T previous-window
  bind-key [ copy-mode
  bind-key ] paste-buffer

# Setup 'v' to begin selection as in Vim
  bind-key -t vi-copy v begin-selection
  bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
  unbind -t vi-copy Enter
  bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
  set-window-option -g display-panes-time 1500

# Enable native Mac OS X copy/paste
  set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

# Allow the arrow key to be used immediately after changing windows
  set-option -g repeat-time 0



#====== START THE STATUS BAR =============#
# Status Bar solarized-dark (default)
  set-option -g status-bg black
  set-option -g pane-active-border-fg black
  set-option -g pane-border-fg black

# Statuc setup
  set-option -g status on
  set-option -g status-fg default
  set -g status-justify left
  set -g status-utf8 on
  set -g status-interval 5


  # Set window notifications
  set -g monitor-activity on
  set -g visual-activity on
  set-option -gw window-status-activity-style "fg=red"


# Session info
# Left Segment
  set -g status-left-length 60
  set -g status-left "#{?client_prefix,#[fg=white bg=blue],#[fg=black bg=white]} #S #{?client_prefix,#[fg=blue bg=black],#[fg=white bg=black]}⮀"

# Right Segment
  set -g status-right-length 60
  set -g status-right "#[fg=blue, bg=black]⮂#[fg=white, bg=blue] #(ifconfig en1 | grep 'inet ' | awk '{print $2}') \#[fg=white, bg=blue]⮂#[fg=black, bg=white] %a, %b %d, %l:%M\ #[fg=black, bg=white]⮂#[fg=white, bg=black]  #{battery_percentage}\#[fg=black, bg=black]⮂"


# Status Bar
  set-window-option -g window-status-format "#[fg=black, bg=black]⮀#[fg=white, bg=black] #I ⮁ #[fg=blue, bg=black] #W #[fg=black, bg=black]⮀"
  set-window-option -g window-status-current-format "#[fg=black, bg=blue]⮀#[fg=white, bg=blue] #I ⮁ #W #[fg=blue, bg=black]⮀"

  # Powerline Python
  #run-shell "powerline-daemon -q"
  #source /usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf





  # List of plugins
  # Supports `github_username/repo` or full git repo URLs
  set -g @tpm_plugins '              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-battery       \
'
  # Other examples:
  # github_username/plugin_name    \
  # git@github.com/user/plugin     \
  # git@bitbucket.com/user/plugin  \

  # Initializes TMUX plugin manager.
  # Keep this line at the very bottom of tmux.conf.
  run-shell '~/.tmux/plugins/tpm/tpm'
